main.py
from indeed import extract_indeed_pages, extract_indeed_jobs
from stackoverflow import get_jobs as get_stackoverflow_jobs
max_indeed_pages=extract_indeed_pages()
indeed_jobs = extract_indeed_jobs(max_indeed_pages)

stackoverflow_jobs=get_stackoverflow_jobs()

jobs = stackoverflow_jobs + indeed_jobs

print(jobs)




indeed.py

import requests
from bs4 import BeautifulSoup

LIMIT = 50
INDEED_URL = f"https://kr.indeed.com/jobs?q=python&limit={LIMIT}"


def extract_indeed_pages():
    result = requests.get(INDEED_URL)
    soup = BeautifulSoup(result.text, "html.parser")
    pagination = soup.find("div", {"class": "pagination"})

    pages = pagination.find_all('a')
    spans = []
    for page in pages[:-1]:
        spans.append(int(page.string))

    max_page = spans[-1]

    return max_page


def extract_job(html):
    title = (html.find("h2", {"class": "title"}))
    title_anchor = title.find("a")["title"]

    company = html.find("span", {"class": "company"})

    if company:

      company_anchor = company.find("a")

      if company_anchor is not None:
          company = (company_anchor.string)
      else:
          company = (company.string)

      company = company.strip()
      
    else:
      company=None




    location = html.find("div", {"class": "recJobLoc"})["data-rc-loc"]

    job_id = html["data-jk"] 
    
  

    return {
        'title': title_anchor,
        'company': company,
        'location': location,
        "link": f"http://kr.indeed.com/취업?q=python&limit=50&vjk={job_id}"
    }


def extract_indeed_jobs(last_pages):
    jobs = []
    for page in range(last_pages):

      print(f"Scrapping Indeed: Page {page}")   <-------------------- indeed 경과 상황을 보여주는 부분


      result = requests.get(f"{INDEED_URL}&start={page*LIMIT}")
      soup = BeautifulSoup(result.text, "html.parser")
      results = soup.find_all("div", {"class": "jobsearch-SerpJobCard"})
      for result in results:
          job = extract_job(result)
          jobs.append(job)
    return jobs
    




stackoverflow.py

import requests
from bs4 import BeautifulSoup


stackoverflow_URL = f"https://stackoverflow.com/jobs?q=python"


def get_last_page():
  result = requests.get(stackoverflow_URL)
  soup=BeautifulSoup(result.text,"html.parser")

  pagination = soup.find("div", {"class":"s-pagination"})
  pages=pagination.find_all("a")
  last_pages=pages[-2].get_text(strip=True)
  return int(last_pages)


def extract_job(html):
  title=html.find("h2",{"class":"mb4"}).find("a")["title"]
  company, location=html.find("h3",{"class":"mb4"}).find_all("span", recursive=False)
  
  
  company=company.get_text(strip=True)
  location=location.get_text(strip=True)

  job_id = html.find("h2",{"class":"fs-body3"}).find("a")["href"]

  return {'title': title,'company': company,'location': location,
'apply_link': f"https://stackoverflow.com{job_id}"}




def extract_jobs(last_pages):     <---------- 여기에 경과 상황을 print 해서 보고 싶은거 보니 여기게 제일 중요한 부분 같은데?
  jobs = []
  for page in range(last_pages):
    print(f"Scrapping Stackoverflow: Page: {page}")     <-------------------- stackoverflow 경과 상황을 보여주는 부분
    result=requests.get(f"{stackoverflow_URL}&pg={page+1}")
    soup=BeautifulSoup(result.text,"html.parser")
    results=soup.find_all("div", {"class":"-job"})
    for result in results:
      job = extract_job(result)
      jobs.append(job)
  return jobs


def get_jobs():
  last_page = get_last_page()
  jobs = extract_jobs(last_page)

  return jobs 

--------------------------------
# 결과 : 엔터가 안되어 있을 뿐, 나오는거엔 문제 없어 

Scrapping Indeed: Page 0
Scrapping Indeed: Page 1
Scrapping Indeed: Page 2
Scrapping Indeed: Page 3
Scrapping Indeed: Page 4
Scrapping Stackoverflow: Page: 0
Scrapping Stackoverflow: Page: 1
Scrapping Stackoverflow: Page: 2
Scrapping Stackoverflow: Page: 3
Scrapping Stackoverflow: Page: 4
Scrapping Stackoverflow: Page: 5
Scrapping Stackoverflow: Page: 6
Scrapping Stackoverflow: Page: 7
Scrapping Stackoverflow: Page: 8
Scrapping Stackoverflow: Page: 9
Scrapping Stackoverflow: Page: 10
Scrapping Stackoverflow: Page: 11
Scrapping Stackoverflow: Page: 12
Scrapping Stackoverflow: Page: 13
Scrapping Stackoverflow: Page: 14
Scrapping Stackoverflow: Page: 15
Scrapping Stackoverflow: Page: 16
Scrapping Stackoverflow: Page: 17
Scrapping Stackoverflow: Page: 18
Scrapping Stackoverflow: Page: 19
Scrapping Stackoverflow: Page: 20
Scrapping Stackoverflow: Page: 21
Scrapping Stackoverflow: Page: 22
Scrapping Stackoverflow: Page: 23
Scrapping Stackoverflow: Page: 24
Scrapping Stackoverflow: Page: 25
Scrapping Stackoverflow: Page: 26
Scrapping Stackoverflow: Page: 27
Scrapping Stackoverflow: Page: 28
Scrapping Stackoverflow: Page: 29
Scrapping Stackoverflow: Page: 30
Scrapping Stackoverflow: Page: 31
Scrapping Stackoverflow: Page: 32
Scrapping Stackoverflow: Page: 33
Scrapping Stackoverflow: Page: 34
Scrapping Stackoverflow: Page: 35
Scrapping Stackoverflow: Page: 36

.
.
.
.
.
.
.

{'title': '21년 상반기 현대오트론 경력사원 수시', 'company': '현대오트론', 'location': '서울', 'link': 'http://kr.indeed.com/취업?q=python&limit=50&vjk=e91a6a5eb66c641f'}
{'title': '[AI/Lab] AI 백엔드 엔지니어 (전문연구요원 가능)', 'company': '버즈니', 'location': '서울', 'link': 'http://kr.indeed.com/취업?q=python&limit=50&vjk=dbe3257e487e5814'}
.
.
.

